#include <iostream>
#include <utility>
#include <limits>
#include <iomanip>

using namespace std;

class Transaction {
struct Tran {
    string tranId, name, movieName, date, time;
    float price = 0, total = 0;
    int seats = 0;

    Tran* next;
};
struct Tran* headTran;
Tran* sortedTran;

public:
    void transactionHistory(string id, string name, string movieName, string date, string time, float price, int seat);
    void sortedTranInsert(Tran* newNode);
    void insertSortingTran(Tran* ref);
    static void backButton();
    void addTran();
    void viewTran();
    void sortTran();
    void TranPage();
    void searchTran();
} tran;

void Transaction::transactionHistory(string id, string name, string movieName, string date, string time, float price, int seats) {
    auto new_tran = new struct Tran;
    new_tran->tranId = std::move(id);
    new_tran->name = std::move(name);
    new_tran->movieName = std::move(movieName);
    new_tran->date = std::move(date);
    new_tran->time = std::move(time);
    new_tran->price = price;
    new_tran->seats = seats;
    new_tran->total = new_tran->price * new_tran->seats;

    new_tran->next = headTran;
    headTran = new_tran;
    cout << headTran->next << endl;
}

void Transaction::sortedTranInsert(Tran* newNode) {
    if (sortedTran == nullptr || sortedTran->total <= newNode->total) {
        newNode->next = sortedTran;
        sortedTran = newNode;
    }
    else {
        Tran* current = sortedTran;
        while (current->next != nullptr
               && current->next->total > newNode->total) {
            current = current->next;
        }
        newNode->next = current->next;
        current->next = newNode;
    }
}

void Transaction::insertSortingTran(Tran* ref) {
    sortedTran = nullptr;
    Tran* current = ref;

    while (current != nullptr) {
        Tran* next = current->next;
        sortedTranInsert(current);
        current = next;
    }

    headTran = sortedTran;
}

void Transaction::backButton() {

}

void Transaction::addTran() {
    auto* add_tran = new struct Tran;
    int mov, dat, tim, seato;
    // Title
    cout << "\n=============================Add Purchase==============================" << endl;

    //Add function
    add_tran->tranId = "T005";
    cout << "Enter Name:\n";
    cin >> add_tran->name;

    //Choose Movie
    movmenu:
    cout << "\nChoose Movie:"
            "\n[1] Jack and the"
            "\n[2] Sanic the"
            "\n[3] Super gym bros";
    cin >> mov;
    switch (mov) {
        case 1:
            add_tran->movieName = "Jack and the";
            add_tran->price = 20;
            goto datemenu;
        case 2:
            add_tran->movieName = "Sanic the";
            add_tran->price = 16;
            goto datemenu;
        case 3:
            add_tran->movieName = "Super gym bros";
            add_tran->price = 18;
            goto datemenu;
        default:
            cout << "Please choose from 1-3" << endl;
            goto movmenu;
    }

    // Choose Date
    datemenu:
    cout << "\nChoose date:"
            "\n[1]25/2/2023"
            "\n[2]27/2/2034"
            "\n[3]29/2/2064";
    cin >> dat;
    switch (dat) {
        case 1:
            add_tran->date = "25/2/2023";
            goto timemenu;
        case 2:
            add_tran->date = "27/2/2034";
            goto timemenu;
        case 3:
            add_tran->date = "29/2/2064";
            goto timemenu;
        default:
            cout << "Please choose from 1-3" << endl;
            goto datemenu;
    }

    //Choose Time
    timemenu:
    cout << "\nChoose Time:"
            "\n[1]10:25"
            "\n[2]13:35"
            "\n[3]15:45";
    cin >> tim;
    switch (tim) {
        case 1:
            add_tran->time = "10:25";
            goto seatsmenu;
        case 2:
            add_tran->time = "13:35";
            goto seatsmenu;
        case 3:
            add_tran->time = "15:45";
            goto seatsmenu;
        default:
            cout << "Please choose from 1-3" << endl;
            goto timemenu;
    }

    //Key in seats:
    seatsmenu:
    cout << "\nEnter seats:" << endl;
    cin >> add_tran->seats;
    while (add_tran->seats < 0 || add_tran->seats > 10 || cin.fail()) {
        cin.clear();
        cin.ignore(numeric_limits<streamsize>::max(), '\n');
        cout << "Enter a positive number/Cannot book more than 10 seats!";
        goto seatsmenu;
    }

    // Calculate total amount
    add_tran->total = add_tran->price*add_tran->seats;

    add_tran->next = headTran;
    headTran = add_tran;
    cout << "Transaction Successful!!!";
}

void Transaction::viewTran() {
    int choice = 0;
    // View all function
    struct Tran* show_all;

    show_all = headTran;

    if (show_all == nullptr) {
        cout << "No movie has been recorded in linkedlist\n";
    }
    else {
        cout << "Transaction ID \tName \t Movie Name \tDate \t\tTime \tPrice \t  Seats   Total Amount \n";
        while (show_all != nullptr) {
            show_all->total = show_all->price*show_all->seats;
            cout << show_all->tranId << fixed << setprecision(2) <<
                 "\t\t" << show_all->name <<
                 "\t " << show_all->movieName <<
                 "\t" << show_all->date <<
                 "\t" << show_all->time <<
                 "\tRM" << show_all->price <<
                 "\t  " << show_all->seats <<
                 "\t  RM" << show_all->total <<
                 endl;

            show_all = show_all->next;
        }
    }

    // Back or Sort
    cout << "\n[1]Back"
            "\n[2]Sort" << endl;
    opt:
    cin >> choice;
    if (choice == 1) {

    } else if (choice == 2){
        sortTran();
    } else if ( !cin.good() || choice != 1) {
        std::cin.clear();
        std::cin.ignore(numeric_limits<streamsize>::max(), '\n');
        cout << "Invalid input! Press 1 to Back.";
        goto opt;
    }

}

void Transaction::sortTran() {
    // Title
    cout << "\n===========================Sorted Purchase=============================" << endl;

    // Sort Function
    struct Tran* show_byTotal, temp;
    show_byTotal = headTran;
    if (show_byTotal == nullptr) {
        cout << "No movie has been recorded in linkedlist\n";
    }
    else {
        insertSortingTran(show_byTotal);
        viewTran();
    }
}

void Transaction::searchTran() {
    int choice;
    // Title
    cout << "\n===========================Search Purchase=============================";

    // Back Button
    backButton();
}

void Transaction::TranPage() {
    menu:
    cout << "\n=================================Menu==================================" << endl;

    cout << "[1] Add Purchase"
            "\n[2] View All Purchase"
            "\n[3] Search Purchase"
            "\n[4] Exit"
         << endl;
    int choice = 0;
    cin >> choice;
    switch (choice) {
        case 1:
            tran.addTran();
            goto menu;
        case 2:
            cout << "\n===========================View All Purchase===========================" << endl;
            viewTran();
            goto menu;
        case 3:
            tran.searchTran();
            goto menu;
        case 4:
            cout << "Are you sure you want to exit? (Y/N)";
            opt:
            char yn;
            cin >> yn;
            if (yn == 'Y' || yn == 'y') {
                break;
            } else if (yn == 'N' || yn == 'n') {
                goto menu;
            } else {
                cout << "Invalid input!!! Please enter Y or N.";
                goto opt;
            }
        default:
            cout << "Invalid input! Please select your choice (1-5)";
            goto menu;
    }
}

int main() {
    tran.transactionHistory("T001", "Michael", "Super gym bros","2/4/2022","08:50",18,2);
    tran.transactionHistory("T002", "Tony","Sanic the","30/2/2022","15:30",16,5);
    tran.transactionHistory("T003", "Sparky","Jack and the","24/1/2022","08:50",20,1);
    tran.transactionHistory("T004", "Bobby","Sanic the","30/2/2022","15:30",16,3);

    tran.TranPage();
}
